map "https://fhir.demo.smartregister.org/fhir/StructureMap/dc80c875-95ea-4cc7-923e-73c41e0312d6" = 'PatientRegistration'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Patient" as target

group EirPatientRegistration(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid(),
        bundle.type = 'collection' "r_bundle_static";
    src -> bundle.entry as entry,
        entry.resource = create('Patient') as patient then
            ExtractChildPatient(src, patient, bundle) "r_bundle_entries";
}

group ExtractChildPatient(source src: QuestionnaireResponse, target patient: Patient, target bundle: Bundle) {

	src -> patient.id = uuid() "r_patient_id";

	src.item where(linkId = 'is-edit-profile' and (answer.exists().not() or answer.value = false)) then {

        src -> bundle.entry as entry, entry.resource = create('Encounter') as encounter then {

            // extract encounter
            src then ExtractEncounter(src, patient, encounter, bundle) "r_patient_encounter";

            // extract weight observation
            src.item where(linkId = 'b33a4361-e9ff-49dd-afbd-b80c91a119ea' and answer.value.exists()) then {
                src -> evaluate(src, $this.item.where(linkId = 'b33a4361-e9ff-49dd-afbd-b80c91a119ea').answer.value.toString()) as childWeight,
                    create('string') as displayValue then {
                        src -> displayValue.value = "Birth weight" "r_patient_obs_disp";
                        src then ExtractSpecificObservation(src, bundle, childWeight, displayValue, patient, encounter) "r_patient_extract_weight_obs";
                    } "r_patient_obs_props";
            } "r_patient_weight_obs";

            // extract height observation
            src.item where(linkId = '21922181-ec78-481d-97f9-9d91a2b31e1f' and answer.value.exists()) then {
                src -> evaluate(src, $this.item.where(linkId = '21922181-ec78-481d-97f9-9d91a2b31e1f').answer.value.toString()) as childHeight,
                    create('string') as displayValue then {
                        src -> displayValue.value = "Birth height" "r_patient_height_obs_disp";
                        src then ExtractSpecificObservation(src, bundle, childHeight, displayValue, patient, encounter) "r_patient_extract_weight_obs";
                    } "r_patient_height_obs_props";
            } "r_patient_height_obs";
        } "r_bundle_entry";
	} "r_is_edit_profile";

    src.item where(linkId = 'child-id' and answer.value.exists()) then {
        src -> patient.id = create("id") as patient_id then {
            src -> patient_id.value = evaluate(src, $this.item.where(linkId='child-id').answer.value.trim()) "r_patient_id_value";
        } "r_patient_cnd_id";
    } "r_patient_id_value_check";

    src -> patient.active = true "r_patient_static";

    src -> patient.identifier = create('Identifier') as clientId then {
        src -> clientId.use = "usual" "r_patient_identifier_path_eir_id_use";
        src -> clientId.system = "https://fhir.demo.smartregister.org/fhir/eir-id" "r_patient_identifier_path_eir_id_system";
        src -> clientId.value = evaluate(src, $this.item.where(linkId = '6c976c04-8f9c-4b4c-aae8-b4d6006006c4').answer.value) "r_patient_identifier_path_eir_id_value";
    } "r_patient_identifier_path_eir_id";

    src -> patient.name = create('HumanName') as patientName then {
        src -> patientName.use = 'official' "r_patient_name_use";
        src -> patientName.text = evaluate(src, ($this.item.where(linkId = '2c299b00-304e-4f2e-af1f-95d39137985a').answer.value | $this.item.where(linkId = '7716e7d2-28bb-4a52-8401-6b250a9b6cb3').answer.value | $this.item.where(linkId = '3283721e-9af7-4cab-b379-844a6fab9e05').answer.value).join(' ').trim()) "r_patient_name_full";

        src -> patientName.given = evaluate(src, ($this.item.where(linkId = '2c299b00-304e-4f2e-af1f-95d39137985a').answer.value.trim())) "r_patient_name_given_first";

        src.item where(linkId = '7b41d922-376c-49bf-f6a8-faaa681e9ef6' and answer.value.exists()) then {
            src -> patientName.given = evaluate(src, $this.item.where(linkId = '7716e7d2-28bb-4a52-8401-6b250a9b6cb3').answer.value.trim()) "r_patient_name_given_middle";
        } "r_patient_name_given_middle_check";

        src -> patientName.family = evaluate(src, $this.item.where(linkId = '3283721e-9af7-4cab-b379-844a6fab9e05').answer.value.trim()) "r_patient_family_name_family";
    } "r_patient_name";

    src.item as patientDob where(linkId = 'ffd72b7a-473a-43bc-80ed-449224e5f216') then {
        patientDob.answer first as birthDate then {
            birthDate.value as val -> patient.birthDate = val "r_patient_dob_answer_value";
        } "r_patient_dob_answer";
    } "r_patient_dob";

    src.item where(linkId = '5b3ba7d2-98fe-45c7-8783-00659a2721b2' and answer.value > 0) then {
        src.item where(linkId = 'ff36c6b9-8975-4a2c-a9d1-f65d8d4b8f6f' and answer.value.code = "years") then {
            src.item as patientAge where(linkId = '5b3ba7d2-98fe-45c7-8783-00659a2721b2') -> patient.birthDate = evaluate(patientAge, today() - (($this.answer.value * 365 + 1).toString() + " days").toQuantity()) "r_patient_age_years";
        } "r_patient_age_years_check";

        src.item where(linkId = 'ff36c6b9-8975-4a2c-a9d1-f65d8d4b8f6f' and answer.value.code = "weeks") then {
            src.item as patientAge where(linkId = '5b3ba7d2-98fe-45c7-8783-00659a2721b2') -> patient.birthDate = evaluate(patientAge, today() - ($this.answer.value.toString() + " weeks").toQuantity()) "r_patient_age_weeks";
        } "r_patient_age_weeks_check";
    } "r_patient_age";

    src.item where(linkId = 'a128c2e1-3273-40e6-909c-91944232b061' and answer.value.code = "male") then {
        src -> patient.gender = "male" "r_patient_gender_male";
    } "r_patient_gender_male";

    src.item where(linkId = 'a128c2e1-3273-40e6-909c-91944232b061' and answer.value.code = "female") then {
        src -> patient.gender = "female" "r_patient_gender_female";
    } "r_patient_gender_female";

    src.item where(linkId = 'a128c2e1-3273-40e6-909c-91944232b061' and answer.value.code = "biological-sex-not-specified") then {
        src -> patient.gender = "other" "r_patient_gender_unspecified";

        src -> patient.extension = create('Extension') as extension then {
            src -> extension.url = "http://example.org/sexual-orientation" "r_patient_gender_unspecified_url";
            src -> extension.value = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/v3-NullFlavor", "OTH") as coding then {
                    src -> coding.display = 'Other' "r_patient_gender_unspecified_ext_coding_display";
                } "r_patient_gender_unspecified_ext_coding";

                src -> concept.coding = c("http://example.org/sexual-orientation", "NA") as coding then {
                    src -> coding.display = 'Biological sex not specified' "r_patient_gender_unspecified_ext_orientation_coding_display";
                } "r_patient_gender_unspecified_ext_orientation_coding";
                src -> concept.text = 'Unspecified' "r_patient_gender_unspecified_ext_orientation_coding_text";
            } "r_patient_gender_unspecified_ext_value";
        } "r_patient_gender_unspecified_ext";
    } "r_patient_gender_unspecified";

    src.item where(linkId = 'a128c2e1-3273-40e6-909c-91944232b061' and answer.value.code = "intersex") then {
        src -> patient.gender = "other" "r_patient_gender_intersex";

        src -> patient.extension = create('Extension') as extension then {
            src -> extension.url = "http://example.org/sexual-orientation" "r_patient_gender_intersex_url";
            src -> extension.value = create('CodeableConcept') as concept then {
                src -> concept.coding = c("http://terminology.hl7.org/CodeSystem/v3-NullFlavor", "OTH") as coding then {
                    src -> coding.display = 'Other' "r_patient_gender_intersex_ext_coding_display";
                } "r_patient_gender_intersex_ext_coding";

                src -> concept.coding = c("http://example.org/sexual-orientation", "NA") as coding then {
                    src -> coding.display = 'Biological sex not specified' "r_patient_gender_intersex_ext_orientation_coding_display";
                } "r_patient_gender_intersex_ext_orientation_coding";
                src -> concept.text = 'Intersex' "r_patient_gender_intersex_ext_orientation_coding_text";
            } "r_patient_gender_intersex_ext_value";
        } "r_patient_gender_intersex_ext";
    } "r_patient_gender_intersex";

	src.item where(linkId = 'caregiver-id' and answer.value.exists()) then {
	    src -> patient.link = create("Patient_Link") as patientLink then {
	        src -> patientLink.other = create('Reference') as ref then {
	            src -> ref.reference = evaluate(src, "RelatedPerson/" + $this.item.where(linkId = "caregiver-id").answer.value) "r_en_part_reference_value";
	        } "r_en_part_ref";
	        src -> patientLink.type = "seealso" "r_patient_link_type";
	    } "r_patient_link";
	} "r_patient_id_value_check";
}

group ExtractEncounter(source src: QuestionnaireResponse, source patient: Patient, target encounter: Encounter, target bundle: Bundle) {
    src -> encounter.id = uuid(),
        encounter.status = 'finished',
        encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH"),
        encounter.subject = reference(patient) "r_en_static";

    src -> encounter.type = create('CodeableConcept') as concept then {
        src -> concept.coding = create("Coding") as coding then {
            src -> coding.system = "http://snomed.info/sct" "r_en_type_coding_system";
            src -> coding.code = "184048005" "r_en_type_coding_code";
            src -> coding.display = "Registration" "r_en_type_coding_display";
        } "r_en_type_coding";
        src -> concept.text = "Registration" "r_en_type_text";
    } "r_en_type";

    src -> encounter.priority = create('CodeableConcept') as concept then {
        src -> concept.coding = create("Coding") as coding then {
            src -> coding.system = "http://terminology.hl7.org/ValueSet/v3-ActPriority" "r_en_priority_coding_system";
            src -> coding.code = "EL" "r_en_priority_coding_code";
            src -> coding.display = "elective" "r_en_priority_coding_display";
        } "r_en_priority_coding";
        src -> concept.text = 'elective' "r_en_priority_text";
    } "r_en_priority";

    src -> encounter.period = create('Period') as enPeriod then {
        src -> enPeriod.start = evaluate(src, now()) "r_en_period_start";
        src -> enPeriod.end = evaluate(src, now()) "r_en_period_end";
    } "r_en_period";

    src -> encounter.reasonCode = create('CodeableConcept') as concept then {
        src -> concept.coding = create("Coding") as coding then {
            src -> coding.system = "http://smartregsiter.org/" "r_en_reason_code_coding_system";
            src -> coding.code = "patient_registration" "r_en_reason_code_coding_code";
            src -> coding.display = "Patient Registration" "r_en_reason_code_coding_display";
        } "r_en_reason_code_coding";
        src -> concept.text = 'Patient Registration' "r_en_reason_code_text";
    } "r_en_reason_code";

	src.item where(linkId = 'caregiver-id' and answer.value.exists()) then {
		src -> encounter.participant = create("Encounter_Participant") as participant then {
            src -> participant.individual = create('Reference') as ref then {
                src -> ref.reference = evaluate(src, "RelatedPerson/" + $this.item.where(linkId = "caregiver-id").answer.value) "r_en_part_reference_value";
            } "r_en_part_ref";
        } "r_en_participant";
    } "r_patient_id_value_check";

    src.item where(linkId = 'location-id' and answer.value.exists()) then {
        src -> encounter.location = create("Encounter_Location") as location then {
            src -> location.location = create('Reference') as ref then {
                src -> ref.reference = evaluate(src, "Location/" + $this.item.where(linkId = "location-id").answer.value) "r_en_loc_location_reference";
            } "r_en_loc_location";
        } "r_en_loc";
    } "r_en_loc_check";
}

group ExtractSpecificObservation(source src : QuestionnaireResponse, target bundle : Bundle, source val: String, source displayValue: String, source patient: Patient, target encounter: Encounter) {
    src -> bundle.entry as entry, entry.resource = create('Observation') as obs then {
        src -> obs.id = uuid(),
            obs.subject = reference(patient),
            obs.effective = evaluate(src, now()),
            obs.performer = evaluate(src, $this.generalPractitioner.first()) "r_obs_static";

        src.item as weightItem where (linkId = "b33a4361-e9ff-49dd-afbd-b80c91a119ea") then {
            src -> obs.value = create('CodeableConcept') as codeableConcept then {
                src -> codeableConcept.text = val "r_obs_value_text";
                src -> codeableConcept.coding = create("Coding") as coding then {
                    src -> coding.system = "http://snomed.info/sct" "r_obs_value_coding_system";
                    src -> coding.code = "27113001" "r_obs_value_coding_code";
                    src -> coding.display = displayValue "r_obs_value_coding_display";
                } "r_obs_value_coding";
            } "r_obs_value";
        } "r_obs_value_check";

        src -> obs.encounter = reference(encounter) "r_obs_encounter";
		src -> encounter.reasonReference = reference(obs) "r_obs_encounter_reason_ref";
    } "r_obs";
}