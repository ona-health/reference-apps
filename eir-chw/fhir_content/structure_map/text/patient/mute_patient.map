map "https://fhir.demo.smartregister.org/fhir/StructureMap/fe5fe0c8-3e8c-4199-ae15-6601f01e4501" = 'MutePatient'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireReponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group MuteHouseholdMember(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.id = uuid(),
        bundle.type = "collection" "r_bundle";
    src then ExtractEncounter(src, bundle) "r_bundle_entry_ext_enc";
}

group ExtractEncounter(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Encounter") as encounter then {
        src -> encounter.id = uuid(),
            encounter.status = "finished",
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home health") "r_enc_static";

        src -> encounter.type = create('CodeableConcept') as concept then {
            src -> concept.coding = c("https://smartregister.org/", "remove_patient") as coding then {
                src -> coding.display = "Remove Patient" "r_en_type_coding_display";
            } "r_en_type_coding";
            src -> concept.text = "Remove Patient" "r_en_type_text";
        } "r_en_type";
    
        src -> encounter.priority = create('CodeableConcept') as priority then {
            src -> priority.coding = c("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL") as priorityCoding then {
                src -> priorityCoding.display = "Elective" "r_en_priority_coding_display";
            } "r_en_priority_coding";
            src -> priority.text = "Elective" "r_en_priority_coding_text";
        } "r_en_priority";

        src.subject as subject -> encounter.subject = subject "r_en_subject";

        // when no date is entered
        src -> encounter.period = create('Period') as enPeriod then {
            src -> enPeriod.start = evaluate(src, now()) "r_en_per_start";
            src -> enPeriod.end = evaluate(src, now()) "r_en_per_end";
        } "r_en_period";
        // date moved entered
        src.item as item where($this.linkId.where(contains('6a3e25ac-61a3-4532-8491-c3218e670585')).exists()) then {
            src -> encounter.period = create('Period') as enPeriod then {
                src -> evaluate(src, $this.item.where(linkId="6a3e25ac-61a3-4532-8491-c3218e670585").answer.value) as dateMoved then {
                    src -> enPeriod.start = create('dateTime') as date,
                        date.value = evaluate(dateMoved, $this.value.substring(0, 10) + 'T00:00:00.00Z') "r_en_period_moved_value_start";

                    src -> enPeriod.end = create('dateTime') as date,
                        date.value = evaluate(dateMoved, $this.value.substring(0, 10) + 'T00:00:00.00Z') "r_en_period_moved_value_end";
                } "r_en_period_moved_value";
            } "r_en_period_moved_period";
        } "r_en_period_moved";

        src -> evaluate(src, $this.item.where(linkId="142ea1f2-d1e7-4b9d-b5ad-35a23d6d95e7").answer.value.code) as reasonForRemoval then {
            src -> encounter.reasonCode = create('CodeableConcept') as reason then {
                src -> reason.coding = c("https://smartregister.org/", reasonForRemoval) as reasonCoding then {
                    src -> reasonCoding.display = evaluate(src, $this.item.where(linkId="142ea1f2-d1e7-4b9d-b5ad-35a23d6d95e7").answer.value.display) "r_en_reason_value_disp";
                } "r_en_priority_coding";
                src -> reason.text = evaluate(src, $this.item.where(linkId="8489d249-1ef3-4edb-aa99-b5713fd2cb0a").answer.value) "r_en_reason_value_text";
            } "r_en_reason";
        } "r_en_reasoncode";

        src then ExtractObservations(src, bundle, encounter) "r_enc_ext_cnd_call";
    } "r_bundle_entry_enc";
}

group ExtractObservations(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src then ExtractReasonForMute(src, bundle, encounter),
        SetPatientActiveAsFalseSoftDelete(src, bundle) "r_ext_cnd";
}

group ExtractReasonForMute(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as item where(linkId = "142ea1f2-d1e7-4b9d-b5ad-35a23d6d95e7") then {
        src -> bundle.entry as entry, entry.resource = create("Observation") as obs then {
            src -> obs.id = uuid() "r_item_reason_for_removal_obs_id";
            src -> obs.code = cc("http://ona.io/codes", "remove-person-reason", "Reason for removal") "r_item_reason_for_removal_obs_code";

            src -> obs.value = create("CodeableConcept")as codeableConcept then {
                src -> codeableConcept.coding = evaluate(item, $this.answer.value.code) "r_item_reason_for_removal_obs_value_cc_coding";
                src -> codeableConcept.text = evaluate(item, $this.answer.value.display) "r_item_reason_for_removal_obs_cc_display";
            } "r_item_reason_for_removal_obs_value";

            src.subject as subject -> obs.subject = subject "r_obs_reason_subject";

            src -> obs.encounter = reference(encounter) "r_item_reason_for_removal_obs_enc";
            src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history", "Social History") "r_item_reason_for_removal_obs_cat";
            src -> obs.effective = evaluate(src, now()) "r_item_reason_for_removal_obs_eff";

            item where(answer.value.code = 'moved-away') then ExtractMoveAwayDate(src, bundle, encounter) "r_item_extract_date_moved_away";
        } "r_item_reason_for_removal_obs";
    } "r_item_reason_for_removal";
}

group ExtractMoveAwayDate(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {
    src.item as item where(linkId = "6a3e25ac-61a3-4532-8491-c3218e670585") then {
        src -> bundle.entry as entry, entry.resource = create("Observation") as obs then {
            src -> obs.id = uuid() "r_item_reason_moved_away_date_id";
            src -> obs.code = cc("http://ona.io/codes", "move-away-reason-date", "Date for Reason Moved Away") "r_item_date_reason_moved_away_obs_code";
            src -> obs.value = evaluate(item, $this.answer.value.toString() + ' 00:00:00') "r_item_reason_moved_away_date_obs_value";

            src.subject as subject -> obs.subject = subject "r_obs_date_subject";

            src -> obs.encounter = reference(encounter) "r_item_reason_moved_away_obs_enc";
            src -> obs.category = cc("http://terminology.hl7.org/CodeSystem/observation-category", "social-history", "Social History") "r_item_reason_moved_away_obs_cat";
            src -> obs.effective = evaluate(src, now()) "r_item_reason_moved_away_obs_eff";
        } "r_item_reason_moved_away_obs";
    } "r_item_reason_moved_away";
}

group SetPatientActiveAsFalseSoftDelete(source src: QuestionnaireResponse, target bundle: Bundle) {
    src.item as item where(linkId = "patient-id") then {
        src -> bundle.entry as entry, entry.resource = create("Patient") as patient then {
            src -> patient.id = create("id") as patient_id then {
                src -> patient_id.value = evaluate(item, $this.answer.value) "r_item_patient_id_patient_set_pat_id";
            } "r_item_patient_id_patient_create_pat_id";

            src -> patient.active = false "r_item_patient_id_patient_active";
        } "r_item_patient_id_patient";
    } "r_item_patient_id";
}