map "https://fhir.demo.smartregister.org/fhir/StructureMap/5e7e8f96-a332-4b4d-8643-a9873046f59e" = 'ChildRecurringServicesSchedule'

uses "http://hl7.org/fhir/StructureDefinition/Parameters" as source
uses "http://hl7.org/fhir/StructureDefinition/CarePlan" as target

group childRecurringServicesSchedule(source src: Parameters, target careplan: CarePlan) {
    src -> evaluate(src, $this.parameter.where(name='subject').resource) as subject,
        evaluate(src, $this.parameter.where(name='definition').resource) as definition,
        evaluate(src, $this.parameter.where(name='depends-on').resource.entry.where(resource is QuestionnaireResponse).resource) as questionnaireResponse,
        evaluate(src, $this.parameter.where(name='period').value) as period,
        evaluate(src, $this.parameter.where(name='version').value) as version
    then extractTask(period, version, subject, definition, careplan) "r_careplan";
}

group extractTask(
    source period: Period,
    source version: Integer,
    source subject: Patient,
    source definition: ActivityDefinition,
    target careplan: CarePlan) {

    // fill task into careplan contained and add reference in activity.outcome
    subject -> create('Task') as task,
        // dosage[version] does not work, hence skipping the item from given index via skip.first
        evaluate(definition, $this.dosage.skip(version).first()) as currentDose then {
        subject -> task.id = uuid(),
            task.identifier = create('Identifier') as iden, iden.value = uuid(), iden.use = 'official',
            task.status = 'requested',
            task.intent = 'plan',
            task.executionPeriod = period,
            task.priority = 'routine',
            // dosage[version] does not work, hence skipping the item from given index via skip.first
            task.description = evaluate(definition, $this.product.text + ' ' + version.toString()),
            task.for = create('Reference') as patientReference, patientReference.reference = evaluate(subject, $this.type().name + '/' + $this.id.replaceMatches('/_history/.*', '')),
            task.basedOn = reference(careplan),
            task.authoredOn = evaluate(subject, now()),
            task.requester = evaluate(subject, $this.generalPractitioner.first()),
            task.owner = evaluate(subject, $this.generalPractitioner.first()),
            task.code = evaluate(definition, code),
            task.reasonCode = evaluate(definition, product) "r_task_data";

        subject -> evaluate(definition, $this.product) as prod then {
            subject where(prod.text = 'Vit A - At Birth') then {
                subject -> task.description = evaluate(definition, $this.product.text) "r_task_vita_ifc_desc";
            } "r_task_desc_vita_ifc";

            subject where(prod.text = 'Vit A') then {
                subject -> evaluate(definition, version) as ver then {
                    subject where(ver = '0') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 6 Months') "r_task_vita1_desc";
                    } "r_task_desc_vita1";

                    subject where(ver = '1') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 1 Year') "r_task_vita2_desc";
                    } "r_task_desc_vita2";

                    subject where(ver = '2') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 1.5 Years') "r_task_vita3_desc";
                    } "r_task_desc_vita3";

                    subject where(ver = '3') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 2 Years') "r_task_vita4_desc";
                    } "r_task_desc_vita4";

                    subject where(ver = '4') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 2.5 Years') "r_task_vita5_desc";
                    } "r_task_desc_vita5";

                    subject where(ver = '5') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 3 Years') "r_task_vita6_desc";
                    } "r_task_desc_vita6";

                    subject where(ver = '6') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 3.5 Years') "r_task_vita7_desc";
                    } "r_task_desc_vita7";

                    subject where(ver = '7') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 4 Years') "r_task_vita8_desc";
                    } "r_task_desc_vita8";

                    subject where(ver = '8') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 4.5 Years') "r_task_vita9_desc";
                    } "r_task_desc_vita9";

                    subject where(ver = '9') then {
                        subject -> task.description = evaluate(definition, $this.product.text + ' - 5 Years') "r_task_vita10_desc";
                    } "r_task_desc_vita10";
                } "r_task_desc_version";
            } "r_task_desc_prod_vita";

            subject where(prod.text = 'Deworming') then {
                subject -> evaluate(definition, version) as ver then {
                    subject -> task.description = evaluate(definition, $this.product.text + ' ' + (ver + 1).toString()) "r_task_deworming_desc";
                } "r_task_desc_deworming_ver";
            } "r_task_desc_deworming";

            subject where(prod.text = 'ITN') then {
                subject -> evaluate(definition, version) as ver then {
                    subject -> task.description = evaluate(definition, $this.product.text + ' ' + (ver + 1).toString()) "r_task_itn_desc";
                } "r_task_desc_itn_ver";
            } "r_task_desc_itn";
        } "r_task_desc_prod";

        subject then extractTaskExecutionPeriod(subject, definition, task) "r_task_period_extraction";

        subject -> task.reasonReference = create('Reference') as reasonReference, reasonReference.reference = 'Questionnaire/911c67be-9196-4eb2-b122-5bfeb7d8fb5f' "r_task_reason_reference";

        // task groupIdentifier
        subject -> task.groupIdentifier = create('Identifier') as groupIdentifier then {
            subject -> groupIdentifier.value = evaluate(definition, $this.dosage.skip(version).first().select(timing.repeat.period.toString() + '_' + timing.repeat.periodUnit)) "r_group_identifier_value";
            subject -> groupIdentifier.use = "secondary" "r_group_identifier_use";
        } "r_group_identifier";

        subject -> evaluate(definition, $this.product) as prod then {
            // Vitamin A (1-10), Deworming & ITNs expire at 5 years
            subject -> evaluate(subject, "1825") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_task_restriction_5_years";

            // Vitamin A - At Birth expires at 6 months
            subject where(prod.text = 'Vit A - At Birth') then {
                subject -> evaluate(subject, "180") as maxDays then extractTaskRestriction(subject, task, definition, version, maxDays) "r_task_restriction_vita";
            } "r_task_restriction_vita_at_birth";
        } "r_task_restriction";

        //add task.input for task dependencies
        subject -> task.input = create('Task_Input') as inputTask then {
            subject -> inputTask.type = create("CodeableConcept") as concept then {
                subject-> concept.coding = c("http://snomed.info/sct","371154000") as coding then {
                        subject -> coding.display = "Dependent (qualifier value)" "r_coding_display";
                    } "r_task_concept_coding";
                } "r_codeable_concept";
            subject -> inputTask.value = 28 "r_input_value";//TODO discuss implementation on how we can make this dynamic for each dosage
         } "r_task_input";

        subject -> evaluate(definition, $this.product.text + ' ' + (version - 1).toString()) as preReqName,
            evaluate(careplan, $this.contained.where(description.contains(preReqName))) as preReqTask then {
                subject where(preReqTask.exists()) -> task.partOf = create('Reference') as partOfReference then {
                    subject -> partOfReference.reference = evaluate(preReqTask, 'Task/' + id) "r_task_reference_id";
                } "r_task_part_of";
            } "r_dosage";

        subject then extractTaskReferenceInput(subject, task, definition, version, careplan) "r_task_reference_input";

        // create activity.detail of type/kind Task for this Task if not exists
        subject where(careplan.activity.where(detail.kind = 'Task').exists().not()) -> careplan.activity = create('CarePlan_Activity') as activity then {
            subject -> activity.detail = create('CarePlan_ActivityDetail') as ActivityDefinition then {
                subject -> ActivityDefinition.kind = 'Task' "r_activity_detail_data";
            } "r_activity_detail";
        } "r_careplan_activity";

        // add task to careplan irrespective of its validity
        subject then {
            subject -> evaluate(careplan, activity.where(detail.kind = 'Task')) as activity, activity.outcomeReference = reference(task) "r_careplan_task_reference";
            subject -> careplan.contained = task "r_add_task";
        } "r_careplan_task";
    } "r_task";
}

group extractTaskReferenceInput(source subject: Patient, target task: Task, source definition: ActivityDefinition, source version: Integer, source careplan: CarePlan) {
    subject -> evaluate(task, $this.partOf.last()) as taskPartOfReference then {
        subject where(taskPartOfReference.empty().not()) then {
            subject -> task.input = create('Task_Input') as inputTask then {
                subject -> inputTask.type = create("CodeableConcept") as concept then {
                    subject-> concept.coding = c("http://snomed.info/sct","900000000000457003") as coding then {
                        subject -> coding.display = "Reference set attribute (foundation metadata concept)" "r_coding_display";
                    } "r_task_concept_coding";
                } "r_codeable_concept";
                subject -> inputTask.value = create('Reference') as partOfReference then {
                        subject -> partOfReference.reference = evaluate(subject, taskPartOfReference.reference.toString()) "r_task_reference_id";
                } "r_task_part_of_reference";
            } "r_task_input";
        } "r_task_part_of_reference_exists";
    } "r_task_part_of_reference";
}

group extractTaskRestriction(source subject: Patient, target task: Task, source definition: ActivityDefinition, source version: Integer, source restrictionEndDate: String) {
    subject -> evaluate(subject, $this.birthDate) as patientBirthDate then {
        subject -> create("Task_Restriction") as taskRestriction then {
            subject -> taskRestriction.period = create("Period") as taskRestrictionPeriod then {
                subject -> taskRestrictionPeriod.start = create('dateTime') as startDateTime,
                    startDateTime.value = evaluate(patientBirthDate, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_period_start";

                subject -> taskRestrictionPeriod.end = create('dateTime') as endDateTime,
                    endDateTime.value = evaluate(patientBirthDate, (($this + (((restrictionEndDate).toString() + ' days')).toQuantity()).value.substring(0,10)) + 'T00:00:00.00Z') "r_period_end";

                subject -> task.restriction = taskRestriction "r_restriction_period";
            } "r_task_restriction_period";
        } "r_task_restriction_extract";
    } "r_birth_date";
}

group extractTaskExecutionPeriod(source subject: Patient, source definition: ActivityDefinition, target task: Task) {
    subject -> evaluate(task, $this.executionPeriod.start) as start, evaluate(task, $this.executionPeriod.end) as end then {
        subject -> create('Period') as period then {
            subject -> period.start = create('dateTime') as startDateTime,
                startDateTime.value = evaluate(start, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_period_start";

            subject -> evaluate(definition, $this.product) as prod then {
                subject where(prod.text != 'Vit A - At Birth') then {
                    subject -> period.end = create('dateTime') as endDateTime,
                        endDateTime.value = evaluate(end, $this.value.substring(0,10) + 'T00:00:00.00Z') "r_period_end";    
                } "r_execution_period_viita_at_birth";

                subject where(prod.text != 'Deworming') then {
                    subject -> evaluate(definition, version) as ver then {
                        subject where(ver = '0') then {
                            subject -> period.end = create('dateTime') as endDateTime,
                                endDateTime.value = evaluate(start, (($this + (((375).toString() + ' days')).toQuantity()).value.substring(0,10)) + 'T00:00:00.00Z') "r_period_end";
                        } "r_period_end__ver";
                    } "r_task_desc_deworming";
                } "r_execution_period_viita_at_birth";
            } "r_execution_period_product";

            subject -> task.executionPeriod = period "r_execution_period";
        } "r_period";
    } "r_task_execution_period";
}