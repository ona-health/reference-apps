map "https://fhir.demo.smartregister.org/fhir/StructureMap/e98ad422-136f-4783-ad7d-4513626bb01d" = 'RecordAllChildImmunizations'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ProcessChildImmunizations(source src: QuestionnaireResponse, target bundle: Bundle) {
  src -> create('Encounter') as encounter,
      create('Encounter') as administrationEncounter
  then ExtractEncounter(src, encounter, bundle),
      ExtractAdministrationEncounter(src, administrationEncounter, encounter, bundle),
      ExtractImmunization(src, administrationEncounter, encounter, bundle) "r_immunizations";
}

group ExtractImmunization(source src: QuestionnaireResponse, source encounterPartOf: Encounter, source encounter: Encounter, target bundle: Bundle) {
    src.item as vaccinesItem where(linkId = 'vaccines codes group') then {
        vaccinesItem.item as vaccine -> bundle.entry as entry,
        entry.resource = create('Immunization') as immunization,
        create ('dateTime') as vaccineDate then {
            src.item where(linkId = 'vaccines same date' and answer.value = true) -> vaccineDate.value = evaluate(src, item.where(linkId = 'vaccines date').answer.value.value) "r_vaccine_date_is_same";
            src.item where(linkId = 'vaccines same date' and answer.value = false) -> vaccineDate.value = evaluate(vaccine, src.item.descendants().where(linkId = vaccine.linkId + ' date').answer.value.value) "r_vaccine_date_not_same";

            src -> immunization.id = uuid(),
                immunization.recorded = evaluate(src, now()),
                immunization.status = "completed",
                immunization.occurrence = vaccineDate,
                immunization.patient = evaluate(src, subject),
                immunization.encounter = reference(encounter) "r_imm_static";

            src -> immunization.vaccineCode = create('CodeableConcept') as concept then {
                src -> concept.text = evaluate(vaccine, $this.linkId.upper()), concept.coding = evaluate(vaccine, $this.answer.value) "r_imm_vaccinecode_concept";
            } "r_imm_vaccinecode";

            // adding record encounter as task.output
            src.item as vaccinesItemAnswer where($this.linkId.where(contains('vaccines_')).exists()) then {
                vaccinesItemAnswer.answer as answerItem where(value.display.lower().contains(vaccine.linkId.lower())) then {
                    src -> evaluate(answerItem, $this.value.reference) as taskId then extractTaskOutput(src, bundle, taskId, encounterPartOf, encounter, immunization) "r_task_output_answer_extract";
                } "r_task_output_answer";
            } "r_task_output_extract";

            src -> immunization.protocolApplied = create('Immunization_AppliedProtocol') as protocolApplied then {
                src -> protocolApplied.doseNumber = evaluate(vaccine, src.item.descendants().where(linkId = vaccine.linkId + ' dose').answer.value.value) "r_imm_protocolapplied_dosenumber";
            } "r_imm_protocolapplied";
        } "r_imm_date";
    } "r_imm_vaccinegroup";
}

group extractTaskOutput(
    source src: QuestionnaireResponse,
    target bundle: Bundle,
    source taskId: String,
    source encounterPartOf: Encounter,
    source encounter: Encounter,
    source immunization: Immunization) {

    src -> bundle.entry as entry, entry.resource = create('Task') as task then {
        src -> task.id = create('id') as id then {
            src -> id.value = taskId "r_task_id";
        } "r_update_task";

        src -> task.status = 'completed' "r_task_status";

        // Task Encounter Output one
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src-> concept.coding = c("http://smartregister.org","41000179103") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_one_coding_display";
                } "r_task_output_one_concept_coding";
            } "r_task_output_one_codeable_concept";
            src -> outputTask.value = reference(encounterPartOf) "r_task_output_one_reference";
        } "r_task_output_one";

        // Task Encounter Output two
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src -> concept.coding = c("http://smartregister.org","41000179103") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_two_coding_display";
                } "r_task_output_two_concept_coding";
            } "r_task_output_two_codeable_concept";
            src -> outputTask.value = reference(encounter) "r_task_output_two_reference";
        } "r_task_output_two";

        // Task Immunization Output
        src -> task.output = create('Task_Output') as outputTask then {
            src -> outputTask.type = create("CodeableConcept") as concept then {
                src -> concept.coding = c("http://smartregister.org","41000179103") as coding then {
                    src -> coding.display = "Immunization record (record artifact)" "r_task_output_imm_coding_display";
                } "r_task_output_imm_concept_coding";
            } "r_task_output_imm_codeable_concept";
            src -> outputTask.value = reference(immunization) "r_task_output_imm_reference";
        } "r_task_output_imm";
    } "r_task_output";
}

group ExtractEncounter(source src: QuestionnaireResponse, target encounter: Encounter, target bundle: Bundle) {
    src -> encounter.id = uuid(),
        encounter.status = "finished",
        encounter.type = cc("http://smartregister.org", "41000179103", "Immunization record (record artifact)") "r_en_static";

    src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";

    src -> encounter.period = create("Period") as period then {
        src -> period.start = evaluate(src, now()) "r_en_period_start";
        src -> period.end = evaluate(src, now()) "r_en_period_end";
    } "r_en_period";

    src -> encounter.reasonCode = create('CodeableConcept') as reason then {
        src -> reason.coding = create("Coding") as coding then {
            src -> coding.system = "http://smartregister.org", coding.display = 'Immunization', coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value)  "r_en_code_coding";
        } "r_en_reason_code";
        src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_reason_text";
    } "r_en_reason";

    src -> encounter.participant = create("Encounter_Participant") as partComp then {
        src -> partComp.individual = create("Reference") as encOwner then {
            src -> encOwner.reference = evaluate(src, "Practitioner/"+ $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_enc_part_reference";
        } "r_enc_part_individual";
    } "r_enc_part_component";

    src then ExtractEncounterLocation(src, encounter) "r_enc_extract_encounter_location";

    src -> bundle.entry as entry, entry.resource = encounter "r_enc_bundle";
}

group ExtractEncounterLocation(source src: QuestionnaireResponse, target encounter: Encounter) {
    src.item as item where($this.linkId.where(contains('fd79b6b3-c269-4694-83fd-cd9e37170c26')).exists() and $this.answer.value.code = "static") then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = create("Reference") as ref then {
                src -> ref.reference = "#001", ref.display = "Static" "r_en_loc_static_location_ref";
            } "r_en_loc_static_location_ref_reference";
            src -> loc.status = "completed", loc.period = evaluate(encounter, $this.period) "r_en_loc_static_location_status";
        } "r_en_loc_static_location";
    } "r_en_loc_static";

    src.item as item where($this.linkId.where(contains('fd79b6b3-c269-4694-83fd-cd9e37170c26')).exists() and $this.answer.value.code = "outreach") then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = create("Reference") as ref then {
                src -> ref.reference = "#002", ref.display = "Outreach" "r_en_loc_outreach_location_ref";
            } "r_en_loc_outreach_location_ref_reference";
          src -> loc.status = "completed", loc.period = evaluate(encounter, $this.period) "r_en_loc_outreach_status";
        } "r_en_loc_outreach_location";
    } "r_en_loc_outreach";

    src.item as item where(linkId = "b00bda77-6df2-4660-8134-c424fb1dbf4f" and answer.value.exists()) then {
        src -> encounter.location = create('Encounter_Location') as loc then {
            src -> loc.location = evaluate(item, $this.answer.value) "r_en_loc_village_ref";
        } "r_en_loc_village_comp";
    } "r_en_loc_village";
}

group ExtractAdministrationEncounter(source src: QuestionnaireResponse, target administrationEncounter: Encounter, target encounter: Encounter, target bundle: Bundle) {
    src -> administrationEncounter.id = uuid(),
        administrationEncounter.status = "finished",
        administrationEncounter.type = cc("http://smartregister.org", "VAC001", "Administration of vaccine to produce active immunity (procedure)") "r_adm_en_static";

    src -> administrationEncounter.subject = evaluate(src, $this.subject) "r_adm_en_sub";

    src -> administrationEncounter.period = create("Period") as period then {
        src -> period.end = evaluate(src, now()) "r_adm_en_period_end";
    } "r_adm_en_period";

    src -> administrationEncounter.partOf = create('Reference') as ref then {
        src -> ref.reference = evaluate(encounter, $this.type().name + '/' + $this.id) "r_adm_en_partof_ref";
    } "r_adm_en_partof";

    src -> bundle.entry as entry, entry.resource = administrationEncounter "r_adm_en_bundle";
}