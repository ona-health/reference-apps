map "https://fhir.demo.smartregister.org/fhir/StructureMap/2b637847-3948-4b82-9864-dbfb347cd84d" = 'RecordChildRecurringService'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group ExtractEncounter(source src: QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Encounter") as encounter then {
        src -> encounter.id = uuid(),
            encounter.status = "finished",
            encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "home"),
            encounter.priority = cc("http://terminology.hl7.org/ValueSet/v3-ActPriority", "EL", "Elective") as encounterPriority,
            encounterPriority.text = "Elective" "r_en_static";
        src -> encounter.subject = evaluate(src, $this.subject) "r_en_sub";
        src -> encounter.period = create("Period") as period then {
            src -> period.start = evaluate(src, now()) "r_start";
            src -> period.end = evaluate(src, now()) "r_end";
        } "r_period";

        src -> encounter.type = create('CodeableConcept') as reason then {
            src -> reason.coding = create("Coding") as coding then {
                src -> coding.system = "http://smartregister.org", coding.display = evaluate(src, $this.item.where(linkId = 'task-name').answer.value), coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value)  "r_en_type_code_coding";
            } "r_en_type_code";
            src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_type_text";
        } "r_en_type";


        src -> encounter.reasonCode = create('CodeableConcept') as reason then {
            src -> reason.coding = create("Coding") as coding then {
                src -> coding.system = "http://smartregister.org", coding.display = evaluate(src, $this.item.where(linkId = 'task-name').answer.value), coding.code = evaluate(src, $this.item.where(linkId = 'task-code').answer.value)  "r_en_code_coding";
            } "r_en_reason_code";
            src -> reason.text = evaluate(src, $this.item.where(linkId = 'task-name').answer.value) "r_en_reason_text";
        } "r_en_reason";
        src -> encounter.participant = create("Encounter_Participant") as partComp then {
            src -> partComp.individual = create("Reference") as encOwner then {
                src -> encOwner.reference = evaluate(src, "Practitioner/" + $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_enc_part_reference";
            } "r_enc_part_individual";
        } "r_enc_part_component";

        src then ExtractVaccineNotGivenFlag(src, bundle, encounter) "r_en_extract_flag";

    } "r_encounter";

    src -> bundle.entry as entry, entry.resource = create('Task') as task then {

        src -> task.id = create('id') as id then {
            src -> id.value = evaluate(src, $this.item.where(linkId = 'logical-task-id').answer.value.toString()) "r_task_id";
        } "r_task_get_existing";

        src.item where(linkId = 'recurring-service-given' and answer.value.exists() and answer.value.code = 'yes') then {
            src -> task.status = 'completed' "r_task_status";
        } "r_task_vaccine_not_given";

        src.item where(linkId = 'recurring-service-given' and answer.value.exists() and answer.value.code = 'no') then {
            src -> task.status = 'failed' "r_task_status";
        } "r_task_vaccine_not_given";


    } "_task";

}

group ExtractVaccineNotGivenFlag(source src: QuestionnaireResponse, target bundle: Bundle, target encounter: Encounter) {

    src.item where(linkId = 'recurring-service-given' and answer.value.exists() and answer.value.code = 'no') then {
        src -> bundle.entry as entry, entry.resource = create('Flag') as flag then {
        src -> flag.id = uuid(),
            flag.subject = evaluate(src, $this.subject) "r_flag_static";

        src -> flag.code = create('CodeableConcept') as concept then {
            src -> concept.coding = create('Coding') as coding then {
                src -> coding.system = "https://smartregister.org/" "r_flag_code_coding_system";
                src -> coding.code = evaluate(src, 'Task/' + $this.item.where(linkId = 'logical-task-id').answer.value) "r_flag_code_coding_code";
                src -> coding.display = evaluate(src, 'Recurring_service_not_given') "r_flag_code_coding_display";
            } "r_flag_code_coding";
            src -> concept.text = "Recurring service not given" "r_flag_code_text";
        } "r_flag_code";

        src -> flag.period = create("Period") as period then {
            src -> period.start = evaluate(src, now()) "r_flag_period_start";
            src -> period.end = evaluate(src, now()) "r_flag_period_end";
        } "r_flag_period";

        src -> flag.encounter = reference(encounter) "r_flag_encounter";
    } "r_flag";
  } "r_flag_vaccine_not_given";
}