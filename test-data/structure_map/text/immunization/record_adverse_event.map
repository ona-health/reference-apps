map "https://fhir.demo.smartregister.org/fhir/StructureMap/f1a25251-d70f-4c6d-a517-98acdeda6a21" = 'RecordAdverseEvent'

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target

group Aefi(source src : QuestionnaireResponse, target bundle: Bundle) {
    src -> bundle.entry as entry, entry.resource = create("Encounter") as encounter then {
		src -> bundle.entry as entry, entry.resource = create("Condition") as condition
            then ExtractEncounter(src, encounter),
                 ExtractReactionManifestationCondition(src, condition, bundle),
                 ExtractAdverseEvent(src, encounter, condition, bundle),
                UpdatePatient(src, bundle) "r_extract_resources";
	} "r_extract_encounter";
}

group UpdatePatient(source src: QuestionnaireResponse, target bundle: Bundle){

    src.item as dod where(linkId = '670552cf-cd9e-4596-9d89-5d6e4872d523' and answer.value.exists()) then {
        src.item as pidItem where(linkId = 'patient-id' and answer.value.exists()) then {
            src -> bundle.entry as entry, entry.resource = create('Patient') as patient then {
                src -> patient.id = create('id') as pid then {
                    src -> pid.value = evaluate(pidItem, $this.answer.value.trim()) "r_pid_value";
                } "r_patient_id";

                src -> evaluate(src, $this.item.where(linkId="670552cf-cd9e-4596-9d89-5d6e4872d523").answer.value) as dateOfDeath then {
                    src -> patient.deceased = create('dateTime') as dt,
                        dt.value = evaluate(dateOfDeath, $this.value.substring(0, 10) + 'T00:00:00.00Z') "r_deceased_dt";
                } "r_dod";

                src -> patient.active = false "r_patient_active";

            } "r_patient";
        } "r_patient";
    } "r_dod_exists";
}

group ExtractEncounter(source src: QuestionnaireResponse, target encounter: Encounter){
    src -> encounter.id = uuid(),
        encounter.status = "finished",
        encounter.class = c("http://terminology.hl7.org/CodeSystem/v3-ActCode", "HH", "Home health") "r_en_static";

    src -> encounter.type = create('CodeableConcept') as cc then {
        src -> cc.text = "Allergies and adverse reactions" "r_cc_display";
        src -> cc.coding = create('Coding') as c then {
            src -> c.system = "http://smartregister.org" "r_c_system";
            src -> c.code = "886921000000105" "r_c_code";
            src -> c.display = "Allergies and adverse reactions" "r_c_display";
        } "r_c";
    } "r_cc";

    src -> encounter.priority = create('CodeableConcept') as cc then {
        src -> cc.text = "Elective" "r_cc_display";
        src -> cc.coding = create('Coding') as c then {
            src -> c.system = "http://terminology.hl7.org/ValueSet/v3-ActPriority" "r_c_system";
            src -> c.code = "EL" "r_c_code";
            src -> c.display = "Elective" "r_c_display";
        } "r_c";
    } "r_cc";

    src.subject as subject -> encounter.subject = subject "r_en_subject";
    src -> encounter.participant = create("Encounter_Participant") as encounterParticipant then {
        src -> encounterParticipant.individual = create("Reference") as encOwner then {
            src -> encOwner.reference = evaluate(src, "Practitioner/" + $this.meta.tag.where($this.system = "https://smartregister.org/practitioner-tag-id").code) "r_enc_part_reference";
        } "r_enc_part_individual";
    } "r_enc_part_component";
    src -> encounter.period = create('Period') as encounterPeriod then {
        src -> encounterPeriod.start = evaluate(src, now()) "r_en_period_start";
        src -> encounterPeriod.end = evaluate(src, now()) "r_en_period_end";
    } "r_en_period";
}

group ExtractReactionManifestationCondition(source src: QuestionnaireResponse, target cnd: Condition, target bundle: Bundle) {
    src -> cnd.id = uuid() "r_cnd_id";

    src.item as startReactionDate where(linkId = "recorded-date") then {
      src -> cnd.onset = create('dateTime') as dt, dt.value = evaluate(startReactionDate, $this.answer.value.toString()) "r_cnd_onset_date_val";
    } "r_cnd_onset_date";

    src -> cnd.clinicalStatus = cc("http://terminology.hl7.org/CodeSystem/condition-clinical", "active") "r_cnd_clinical_st";
    src.subject as subject -> cnd.subject = subject "r_cnd_sub";
    src -> cnd.recordedDate = evaluate(src, now()) "r_cnd_recorded";

    src.item as reactionManifestation where(linkId = "a2f71c64-5ccc-4575-8638-d51aeefe6e6c") then {
        src -> cnd.code = create("CodeableConcept") as cc then {
            src -> cc.coding = create('Coding') as c then {
                src -> c.system = "http://smartregister.org" "r_c_system";
                src -> c.code = evaluate(reactionManifestation, $this.answer.value.code) "r_c_code";
                src -> c.display = evaluate(reactionManifestation, $this.answer.value.display) "r_c_display";
            } "r_c";
            src -> cc.text = evaluate(reactionManifestation, $this.answer.value.display) "r_cnd_code_text";
        } "r_cnd_code";
    } "r_reaction_manifestation";
}

group ExtractAdverseEvent(source src: QuestionnaireResponse, source encounter: Encounter, source condition: Condition, target bundle: Bundle){
    src -> bundle.entry as entry, entry.resource = create("AdverseEvent") as adverseEvent then {
        src -> adverseEvent.id = uuid(),
               adverseEvent.encounter = reference(encounter),
               adverseEvent.resultingCondition = reference(condition) "r_ae_static";
        src -> evaluate(src, $this.item.where(linkId="recorded-date").answer.value) as recordedDate then {
            src -> adverseEvent.recordedDate = create('dateTime') as date,
                   date.value = evaluate(recordedDate, $this.value.substring(0, 10) + 'T00:00:00.00Z') "r_recorded_date";
        } "r_ae_recorded_date";

        // suspectEntity
        src.item as item where($this.linkId.where(contains('child-vaccines')).exists()) then {
            src -> adverseEvent.suspectEntity = create("AdverseEvent_SuspectEntity") as aeSuspectEntity then {
                src -> aeSuspectEntity.instance = create("Reference") as aeOwner then {
                    src -> evaluate(src, $this.item.where(linkId = 'child-vaccines').answer.value.reference) as immunization then {
                        src -> aeOwner.reference = immunization "r_ae_suspect_entity_instance_ref_child";
                    } "r_ae_suspect_entity_instance_child";
                } "r_ae_suspect_entity_child";

                src.item as reactionOutcomeItem where(linkId = "9bbf6a69-3c16-4052-82a5-8ca9f9102ef3" and answer.value.exists()) then {
                    src -> aeSuspectEntity.causality = create('AdverseEvent_SuspectEntityCausality') as causality then {
                        src -> causality.assessment = create('CodeableConcept') as cc then {
                            src -> cc.text = evaluate(reactionOutcomeItem, $this.answer.value.display) "r_cc_display";
                            src -> cc.coding = create('Coding') as c then {
                                src -> c.system = "http://smartregister.org" "r_c_system";
                                src -> c.code = evaluate(reactionOutcomeItem, $this.answer.value.code) "r_c_code";
                                src -> c.display = evaluate(reactionOutcomeItem, $this.answer.value.display) "r_c_display";
                            } "r_c";
                        } "r_cc";
                    } "r_causality";
                } "r_ro";

            } "r_ae_suspect_entity_child";
        } "r_ae_se_child";

        src.subject as subject -> adverseEvent.subject = subject "r_ae_subject";

        src.item as item where(linkId = "287f1e51-937b-4a44-ab72-6b82a0a1475f" and answer.value.exists()) then {
            src -> adverseEvent.severity = create('CodeableConcept') as cc then {
                src -> cc.text = evaluate(item, $this.answer.value.display) "r_cc_display";
                src -> cc.coding = create('Coding') as c then {
                    src -> c.system = "http://smartregister.org" "r_c_system";
                    src -> c.code = evaluate(item, $this.answer.value.code) "r_c_code";
                    src -> c.display = evaluate(item, $this.answer.value.display) "r_c_display";
                } "r_c";
            } "r_cc";
        } "r_tor";

    } "r_extract_adverse_event";
}
